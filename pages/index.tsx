import type { NextPage } from "next";
import Head from "next/head";
import {
  HomeContainer,
  HomeWrapper,
  ButtonAddContainer,
} from "../styles/Home.styles";
import ColumnContainer from "./components/ColumnContainer";
import ButtonAdd from "./components/ButtonAdd";
import { IList } from "../interfaces";
import { useQuery, gql } from "@apollo/client";
import useQueryActions from "../customHooks/useQueryActions";
import CardPreview from "./components/ColumnContainer/Card/CardPreview.styles";

const GET_LISTS = gql`
  query GetLists {
    lists {
      _id
      title
      tasks
    }
  }
`;

interface DataInterface {
  lists: IList[];
}

const Home: NextPage = () => {
  const { loading, error, data } = useQuery<DataInterface>(GET_LISTS, {
    errorPolicy: "all",
  });

  const { addNewColumn, addNewCard } = useQueryActions();

  if (error) {
    return (
      <>
        {error.graphQLErrors?.forEach(({ message }, i) => (
          <span key={i}>{message}</span>
        ))}
      </>
    );
  }

  if (data !== null && loading) {
    return <h1>Loading ...</h1>;
  }

  return (
    <>
      <Head>
        <title>Trello App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <HomeWrapper>
        <HomeContainer>
          <>
            <CardPreview />
            {data && !loading
              ? data.lists.map((list) => (
                  <ColumnContainer
                    key={list._id}
                    list={list}
                    onAddNewCard={addNewCard}
                  />
                ))
              : null}

            <ButtonAddContainer>
              <ButtonAdd
                title={`+ Add new column`}
                handleClick={addNewColumn}
              />
            </ButtonAddContainer>
          </>
        </HomeContainer>
      </HomeWrapper>
    </>
  );
};

export default Home;
